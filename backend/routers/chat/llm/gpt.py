from .base import LLMProvider
import os
from openai import OpenAI
from typing import Generator

class GPT4oProvider(LLMProvider):
    """
    An LLM provider that uses the OpenAI API to serve the GPT-4o model.
    """
    def __init__(self):
        self.client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))
        self.model = "gpt-4o"

    def query(self, system_prompt: str, user_prompt: str) -> Generator[str, None, None]:
        """
        Sends a streaming query to the GPT-4o model via the OpenAI API.

        Args:
            system_prompt: The instruction or context for the model's behavior.
            user_prompt: The user's direct question or input.

        Yields:
            Chunks of the text response as they are generated by the LLM.
        """
        stream = self.client.chat.completions.create(
            messages=[
                {
                    "role": "system",
                    "content": system_prompt
                },
                {
                    "role": "user",
                    "content": user_prompt,
                }
            ],
            model=self.model,
            stream=True,
        )

        for chunk in stream:
            content = chunk.choices[0].delta.content
            if content:
                yield content 